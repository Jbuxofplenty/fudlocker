import * as firebase from 'firebase';

class User {
  constructor() {
    this.uid = null;
    this.name = null;
    this.headshot = null;
    this.email = null;
    this.phone = null;
    this.org = null;
  }
}

(function firebase_init() {
  try {
    // Initialize Firebase
    var config = {
      apiKey: "AIzaSyC6wZSSUcyYDpsuS6bTxfrnOjrY1KIi1qU",
      authDomain: "fudlkr-7fc5b.firebaseapp.com",
      databaseURL: "https://fudlkr-7fc5b.firebaseio.com",
      projectId: "fudlkr-7fc5b",
      storageBucket: "fudlkr-7fc5b.appspot.com",
      messagingSenderId: "471202846868"
    };
    firebase.initializeApp(config);
    // Initialize the default app
    var defaultApp = firebase.initializeApp(config);

  } catch (err) {
    // we skip the "already exists" message which is
    // not an actual error when we're hot-reloading
    if (!/already exists/.test(err.message)) {
      console.error('Firebase initialization error', err.stack)
    }
  }
})();

export async function check_logged_in() {
  await firebase.auth().onAuthStateChanged(function (user) {
    if (user) {
      // User is signed in.
      var tempUserInfo = populate_user_info(user.uid);
      tempUserInfo.then(function (value) {
        console.log(value);
        if (value.org == null) {
          alert("User not associated with an organization!");
          window.location = "../../../signin.html";
        }
      });
    } else {
      // User is signed out.
      window.location = "../../../signin.html";
    }
  }, function (error) {
    console.log(error);
    });
};

export async function populate_user_info(userId) {
  var user = {};
  //Get the user data
  await firebase.database().ref('/users/' + userId).once('value').then(function (snapshot) {
    user["name"] = snapshot.val().name;
    user["headshot"] = snapshot.val().headshot;
    user["email"] = snapshot.val().email;
    user["phone"] = snapshot.val().phone;
    user["org"] = snapshot.val().org;
  }.bind(this));
  return user;
}

export async function validate_login() {
  let validated = true;
  var email = document.getElementById("inputEmail").value;
  var password = document.getElementById("inputPassword").value;
  var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  if (re.test(String(email).toLowerCase())) {
    document.getElementById("inputEmail").style.borderColor = "green";
  }
  else {
    validated = false;
    alert("Email formatted incorrectly!");
    document.getElementById("inputEmail").style.borderColor = "red";
    return validated;
  }
  if (password.length > 5) {
    document.getElementById("inputPassword").style.borderColor = "green";
  }
  else {
    validated = false;
    alert("Password not at least 6 characters long!");
    document.getElementById("inputPassword").style.borderColor = "red";
    return validated;
  }
  await firebase.auth().signInWithEmailAndPassword(email, password).then((authData) => {
    window.location = "../../../index.html";
  }).catch(function (error) {
    // Handle Errors here.
    var errorCode = error.code;
    var errorMessage = error.message;
    if (errorCode === 'auth/wrong-password') {
      document.getElementById("inputPassword").style.borderColor = "red";
      alert("Password Incorrect!");
    } else {
      document.getElementById("inputEmail").style.borderColor = "red";
      document.getElementById("inputPassword").style.borderColor = "red";
      alert("Email and/or Password Incorrect!");
    }
    validated = false
    }.bind(this));
  return validated;
}

export async function sendPasswordReset() {
  var email = document.getElementById('email').value;
  // [START sendpasswordemail]
  firebase.auth().sendPasswordResetEmail(email).then(function () {
    // Password Reset Email Sent!
    // [START_EXCLUDE]
    alert('Password Reset Email Sent!');
    // [END_EXCLUDE]
  }).catch(function (error) {
    // Handle Errors here.
    var errorCode = error.code;
    var errorMessage = error.message;
    // [START_EXCLUDE]
    if (errorCode == 'auth/invalid-email') {
      alert(errorMessage);
    } else if (errorCode == 'auth/user-not-found') {
      alert(errorMessage);
    }
    console.log(error);
    // [END_EXCLUDE]
  });
  // [END sendpasswordemail];
}

export async function populate_dashboard() {
  //Get the current userID
  var userId = firebase.auth().currentUser.uid;
  var org = fb.auth().currentUser.token;

  var locations;
  await fb.database().ref('/lockers/data').once('value', function (snapshot) {
    let tempArray = {};
    snapshot.forEach(function (childSnapshot) {
      var childData = childSnapshot.val();
      tempArray[childSnapshot.key] = childData;
    });
    locations = tempArray;
  }.bind(this));
  console.log(locations);

  var mealsForSale;
  await fb.database().ref('/meals/forSale').once('value', function (snapshot) {
    let tempArray = {};
    snapshot.forEach(function (childSnapshot) {
      var childData = childSnapshot.val();
      tempArray[childSnapshot.key] = childData;
    });
    mealsForSale = tempArray;
  }.bind(this));
  console.log(mealsForSale);

  var pickedUp;
  await fb.database().ref('/restaurants/' + org + '/inventory/pickedUp').once('value', function (snapshot) {
    let tempArray = {};
    snapshot.forEach(function (childSnapshot) {
      var childData = childSnapshot.val();
      tempArray[childSnapshot.key] = childData;
    });
    pickedUp = tempArray;
  }.bind(this));
  console.log(pickedUp);

};
